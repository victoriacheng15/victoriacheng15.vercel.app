---
import type { SiteMeta } from "@/data/siteMeta";
import BaseHead from "@/components/BaseHead";
import Navbar from "@/components/Navbar";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import siteConfig from "@/site-config";

interface Props {
	meta: SiteMeta;
}

const {
	meta: { title, description = siteConfig.description, ogImage, articleDate },
} = Astro.props;
---

<html lang={siteConfig.lang}>
	<head>
		<BaseHead title={title} description={description} ogImage={ogImage} articleDate={articleDate} />
		<script define:vars={{ siteConfig }}>
			const root = document.documentElement;
			const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");

			// get user preference of dark mode, 1st local storage, 2nd browser
			function getThemePreference() {
				if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
					return localStorage.getItem("theme");
				}
				return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
			}

			const isDark = getThemePreference() === "dark";

			// watch document element class attribute and update user preference when it changes.
			const observer = new MutationObserver(() => {
				const rootIsDark = root.classList.contains("dark");
				// set the meta attribute
				colorThemeMetaTag.setAttribute(
					"content",
					siteConfig[rootIsDark ? "themeColorDark" : "themeColorLight"]
				);
				// store user preference
				if (typeof localStorage !== "undefined") {
					localStorage.setItem("theme", rootIsDark ? "dark" : "light");
				}
			});
			observer.observe(root, { attributeFilter: ["class"] });

			// initailse root class attribute
			root.classList.toggle("dark", isDark);
		</script>
	</head>
	<body>
		<Navbar />
		{title === "Home" && <Header />}
		<main class="mx-auto w-11/12 max-w-5xl py-16">
			<slot />
		</main>
		<Footer />
	</body>
</html>
